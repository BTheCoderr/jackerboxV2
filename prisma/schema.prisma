generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id                     String         @id @default(cuid())
  name                   String?
  email                  String         @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  phone                  String?        @unique
  phoneVerified          Boolean        @default(false)
  bio                    String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  verificationToken      String?
  twoFactorEnabled       Boolean        @default(false)
  idVerified             Boolean        @default(false)
  idVerificationStatus   String?
  idDocumentType         String?
  idDocumentUrl          String?
  idVerificationDate     DateTime?
  isAdmin                Boolean        @default(false)
  stripeConnectAccountId String?
  userType               String?        @default("both")
  accounts               Account[]
  calendarSyncs          CalendarSync[]
  moderatedEquipment     Equipment[]    @relation("ModeratedEquipment")
  equipmentListings      Equipment[]    @relation("OwnerEquipment")
  receivedMessages       Message[]      @relation("MessageReceiver")
  messages               Message[]      @relation("MessageSender")
  notifications          Notification[]
  payments               Payment[]
  rentals                Rental[]       @relation("RenterRentals")
  reviews                Review[]       @relation("ReviewAuthor")
  receivedReviews        Review[]       @relation("ReviewReceiver")
  reviewVotes            ReviewVote[]
  sessions               Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Equipment {
  id               String           @id @default(cuid())
  title            String
  description      String
  condition        String
  category         String
  subcategory      String?
  tagsJson         String           @default("[]")
  location         String
  latitude         Float?
  longitude        Float?
  hourlyRate       Float?
  dailyRate        Float?
  weeklyRate       Float?
  securityDeposit  Float?
  imagesJson       String           @default("[]")
  isVerified       Boolean          @default(false)
  isAvailable      Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  moderationStatus ModerationStatus @default(PENDING)
  moderatedAt      DateTime?
  moderatedBy      String?
  moderationNotes  String?
  ownerId          String
  availability     Availability[]
  calendarSync     CalendarSync?
  moderator        User?            @relation("ModeratedEquipment", fields: [moderatedBy], references: [id])
  owner            User             @relation("OwnerEquipment", fields: [ownerId], references: [id])
  rentals          Rental[]
  reviews          Review[]         @relation("EquipmentReviews")

  @@index([ownerId])
  @@index([moderationStatus])
  @@index([moderatedBy])
}

model Availability {
  id                   String    @id @default(cuid())
  startDate            DateTime
  endDate              DateTime
  equipmentId          String
  isRecurring          Boolean   @default(false)
  recurrenceDaysOfWeek String?
  recurrenceEndDate    DateTime?
  recurrenceInterval   Int?
  recurrenceType       String?
  equipment            Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Rental {
  id              String    @id @default(cuid())
  startDate       DateTime
  endDate         DateTime
  totalPrice      Float
  securityDeposit Float?
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  equipmentId     String
  renterId        String
  payment         Payment?
  equipment       Equipment @relation(fields: [equipmentId], references: [id])
  renter          User      @relation("RenterRentals", fields: [renterId], references: [id])
  review          Review?
}

model Review {
  id                String       @id @default(cuid())
  rating            Int
  comment           String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  authorId          String
  receiverId        String?
  equipmentId       String?
  rentalId          String?      @unique
  helpfulVotes      Int          @default(0)
  isVerifiedRental  Boolean      @default(true)
  ownerResponse     String?
  ownerResponseDate DateTime?
  reportCount       Int          @default(0)
  unhelpfulVotes    Int          @default(0)
  author            User         @relation("ReviewAuthor", fields: [authorId], references: [id])
  equipment         Equipment?   @relation("EquipmentReviews", fields: [equipmentId], references: [id])
  receiver          User?        @relation("ReviewReceiver", fields: [receiverId], references: [id])
  rental            Rental?      @relation(fields: [rentalId], references: [id])
  votes             ReviewVote[]
}

model ReviewVote {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  isHelpful Boolean
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId])
}

model Payment {
  id                      String   @id @default(cuid())
  amount                  Float
  currency                String   @default("USD")
  status                  String
  paymentMethod           String?
  stripeId                String?  @unique
  stripePaymentIntentId   String?  @unique
  stripeTransferId        String?  @unique
  disputeId               String?  @unique
  securityDepositAmount   Float?
  rentalAmount            Float?
  securityDepositReturned Boolean  @default(false)
  ownerPaidOut            Boolean  @default(false)
  ownerPaidOutAmount      Float?
  platformFee             Float?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  userId                  String
  rentalId                String   @unique
  rental                  Rental   @relation(fields: [rentalId], references: [id])
  user                    User     @relation(fields: [userId], references: [id])
}

model Message {
  id              String   @id @default(cuid())
  content         String
  isRead          Boolean  @default(false)
  createdAt       DateTime @default(now())
  senderId        String
  receiverId      String
  attachmentsJson String?  @default("[]")
  receiver        User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender          User     @relation("MessageSender", fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  userId    String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CalendarSync {
  id            String    @id @default(cuid())
  userId        String
  equipmentId   String    @unique
  calendarType  String
  calendarId    String?
  icalUrl       String?
  syncDirection String
  syncFrequency String
  lastSynced    DateTime?
  accessToken   String?
  refreshToken  String?
  tokenExpiry   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  equipment     Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id])
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}
