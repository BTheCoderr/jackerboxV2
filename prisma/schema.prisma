generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                    String             @id @default(cuid())
  name                                  String?
  email                                 String             @unique
  emailverified                         DateTime?          @db.Timestamp(6)
  image                                 String?
  password                              String?
  phone                                 String?            @unique
  phoneverified                         Boolean?           @default(false)
  bio                                   String?
  createdat                             DateTime?          @default(now()) @db.Timestamp(6)
  updatedat                             DateTime?          @db.Timestamp(6)
  verificationtoken                     String?
  twofactorenabled                      Boolean?           @default(false)
  idverified                            Boolean?           @default(false)
  idverificationstatus                  String?            @default("PENDING")
  iddocumenttype                        String?
  iddocumenturl                         String?
  idverificationdate                    DateTime?          @db.Timestamp(6)
  role                                  String?            @default("USER")
  isadmin                               Boolean?           @default(false)
  stripeconnectaccountid                String?
  usertype                              String?            @default("both")
  Account                               Account[]
  CalendarSync                          CalendarSync[]
  Equipment_Equipment_moderatedbyToUser  Equipment[]        @relation("Equipment_moderatedbyToUser")
  Equipment_Equipment_owneridToUser      Equipment[]        @relation("Equipment_owneridToUser")
  FraudDetection                        FraudDetection[]
  Message_Message_receiveridToUser       Message[]          @relation("Message_receiveridToUser")
  Message_Message_senderidToUser         Message[]          @relation("Message_senderidToUser")
  Notification                          Notification[]
  Payment                               Payment[]
  PushSubscription                      PushSubscription[]
  Rental                                Rental[]
  Review_Review_authoridToUser          Review[]           @relation("Review_authoridToUser")
  Review_Review_receiveridToUser        Review[]           @relation("Review_receiveridToUser")
  ReviewVote                            ReviewVote[]
  Session                               Session[]
  VerificationRequest                   VerificationRequest[]  @relation("UserVerificationRequests")
}

model Account {
  id                String  @id @default(cuid())
  userid            String
  type              String
  provider          String
  provideraccountid String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider, provideraccountid])
}

model Session {
  id           String   @id @default(cuid())
  sessiontoken String   @unique
  userid       String
  expires      DateTime @db.Timestamp(6)
  User         User     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
}

model Equipment {
  id                               String             @id @default(cuid())
  title                            String
  description                      String
  condition                        String
  category                         String
  subcategory                      String?
  tagsjson                         String?            @default("[]")
  location                         String
  latitude                         Float?
  longitude                        Float?
  hourlyrate                       Float?
  dailyrate                        Float?
  weeklyrate                       Float?
  securitydeposit                  Float?
  imagesjson                       String?            @default("[]")
  isverified                       Boolean?           @default(false)
  isavailable                      Boolean?           @default(true)
  createdat                        DateTime?          @default(now()) @db.Timestamp(6)
  updatedat                        DateTime?          @db.Timestamp(6)
  moderationstatus                 ModerationStatus?  @default(PENDING)
  moderatedat                      DateTime?          @db.Timestamp(6)
  moderatedby                      String?
  moderationnotes                  String?
  ownerid                          String
  Availability                     Availability[]
  CalendarSync                     CalendarSync?
  User_Equipment_moderatedbyToUser User?              @relation("Equipment_moderatedbyToUser", fields: [moderatedby], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Equipment_owneridToUser     User               @relation("Equipment_owneridToUser", fields: [ownerid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PaymentAnalytics                 PaymentAnalytics[]
  Rental                           Rental[]
  Review                           Review[]

  @@index([moderationstatus], map: "equipment_moderation_idx")
  @@index([moderatedby], map: "equipment_moderator_idx")
  @@index([ownerid], map: "equipment_owner_idx")
}

model Availability {
  id                   String    @id @default(cuid())
  startdate            DateTime  @db.Timestamp(6)
  enddate              DateTime  @db.Timestamp(6)
  equipmentid          String
  isrecurring          Boolean?  @default(false)
  recurrencedaysofweek String?
  recurrenceenddate    DateTime? @db.Timestamp(6)
  recurrenceinterval   Int?
  recurrencetype       String?
  Equipment            Equipment @relation(fields: [equipmentid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Payment {
  id                    String        @id @default(cuid())
  createdat             DateTime?     @default(now()) @db.Timestamp(6)
  updatedat             DateTime?     @default(now()) @db.Timestamp(6)
  amount                Float
  currency              String
  status                PaymentStatus
  stripepaymentintentid String?       @unique
  stripechargeid        String?       @unique
  paidat                DateTime?     @db.Timestamp(6)
  failedat              DateTime?     @db.Timestamp(6)
  refundedat            DateTime?     @db.Timestamp(6)
  metadata              Json?
  retrycount            Int?          @default(0)
  lastretryat           DateTime?     @db.Timestamp(6)
  nextretryat           DateTime?     @db.Timestamp(6)
  ipaddress             String?
  useragent             String?
  fraudscore            Float?        @default(0)
  velocityscore         Float?        @default(0)
  isblocked             Boolean?      @default(false)
  blockreason           String?
  rentalid              String?       @unique
  userid                String
  Rental                Rental?       @relation(fields: [rentalid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                  User          @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([createdat], map: "payment_created_idx")
  @@index([ipaddress], map: "payment_ip_idx")
  @@index([status], map: "payment_status_idx")
}

model PaymentAnalytics {
  id                String     @id @default(cuid())
  date              DateTime?  @default(now()) @db.Timestamp(6)
  totaltransactions Int?       @default(0)
  successcount      Int?       @default(0)
  failurecount      Int?       @default(0)
  totalamount       Float?     @default(0)
  averageamount     Float?     @default(0)
  peakhour          Int?
  equipmentid       String?
  Equipment         Equipment? @relation(fields: [equipmentid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([date, equipmentid])
  @@index([date], map: "analytics_date_idx")
  @@index([equipmentid], map: "analytics_equipment_idx")
}

model FraudDetection {
  id             String    @id @default(cuid())
  ipaddress      String
  useragent      String?
  score          Float?    @default(0)
  lastdetectedat DateTime? @default(now()) @db.Timestamp(6)
  detectioncount Int?      @default(1)
  userid         String
  User           User      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Rental {
  id          String       @id @default(cuid())
  startdate   DateTime     @db.Timestamp(6)
  enddate     DateTime     @db.Timestamp(6)
  status      RentalStatus
  totalamount Float
  equipmentid String
  renterid    String
  createdat   DateTime?    @default(now()) @db.Timestamp(6)
  updatedat   DateTime?    @default(now()) @db.Timestamp(6)
  Payment     Payment?
  Equipment   Equipment    @relation(fields: [equipmentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User         @relation(fields: [renterid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Review      Review[]
}

model Review {
  id                           String       @id @default(cuid())
  rating                       Int
  comment                      String?
  createdat                    DateTime?    @default(now()) @db.Timestamp(6)
  updatedat                    DateTime?    @default(now()) @db.Timestamp(6)
  authorid                     String
  receiverid                   String
  equipmentid                  String?
  rentalid                     String?
  User_Review_authoridToUser   User         @relation("Review_authoridToUser", fields: [authorid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Equipment                    Equipment?   @relation(fields: [equipmentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Review_receiveridToUser User         @relation("Review_receiveridToUser", fields: [receiverid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Rental                       Rental?      @relation(fields: [rentalid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ReviewVote                   ReviewVote[]
}

model ReviewVote {
  id        String    @id @default(cuid())
  value     Int
  userid    String
  reviewid  String
  createdat DateTime? @default(now()) @db.Timestamp(6)
  Review    Review    @relation(fields: [reviewid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User      User      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Message {
  id                            String    @id @default(cuid())
  content                       String
  createdat                     DateTime? @default(now()) @db.Timestamp(6)
  senderid                      String
  receiverid                    String
  readat                        DateTime? @db.Timestamp(6)
  User_Message_receiveridToUser User      @relation("Message_receiveridToUser", fields: [receiverid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User_Message_senderidToUser   User      @relation("Message_senderidToUser", fields: [senderid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Notification {
  id        String    @id @default(cuid())
  type      String
  title     String
  message   String
  userid    String
  read      Boolean?  @default(false)
  createdat DateTime? @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model CalendarSync {
  id           String     @id @default(cuid())
  provider     String
  calendarid   String
  accesstoken  String?
  refreshtoken String?
  expiresat    DateTime?  @db.Timestamp(6)
  lastsyncedat DateTime?  @db.Timestamp(6)
  userid       String
  equipmentid  String?    @unique
  Equipment    Equipment? @relation(fields: [equipmentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User         User       @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PushSubscription {
  id        String    @id @default(cuid())
  endpoint  String
  p256dh    String
  auth      String
  userid    String
  createdat DateTime? @default(now()) @db.Timestamp(6)
  User      User      @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VerificationRequest {
  id                String    @id @default(cuid())
  userid            String
  status            String    @default("PENDING")
  documenttype      String
  documenturl       String
  notes             String?
  submittedat       DateTime  @default(now()) @db.Timestamp(6)
  processedat       DateTime? @db.Timestamp(6)
  processedby       String?
  user              User      @relation("UserVerificationRequests", fields: [userid], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([userid])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  BLOCKED
  RETRY_SCHEDULED
}

enum RentalStatus {
  PENDING
  PAID
  PAYMENT_FAILED
  ACTIVE
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
}
